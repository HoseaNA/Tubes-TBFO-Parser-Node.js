Terminals:
+ - * / % and or variable number is ! not = > < ( ) { } true false string ' " & if elif else : print input str float int double while for in range def class import as from return raise len range , break pass continue with open null function throw let finally switch case delete .
Variables:
S OPERATOR VAR VARCLASS VAL STRING VV INBRACKET DELETE DELETEVAL FINALLY FUNCTION VARVALFUNC LET NULL THROW RETURN VAL BREAK CONTINUE SWITCH CASE DEFAULT CONST VALARRAY ARRAY BOOLEAN TRY CATCH RELATION OPARITH COMP COMPOPRT OR INCDEC WHILE FOR IF ELIF ELSE FUNCDEC SLOOP IFLOOP ELIFLOOP ELSELOOP SWITCHLOOP CASELOOP DEFAULTLOOP SFUNC IFFUNC ELIFFUNC ELSEFUNC SWITCHFUNC DEFAULTFUNC FORFUNC SLF SWITCHLF CASELF DEFAULTLF
Productions:
S -> S S | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IF | PRINT | WHILE | FOR | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCH | DELETE | LET | TRY | FUNCDEC;
OPERATOR -> + | - | * | / | %;
VAR -> variable | VARCLASS ;
VARCLASS -> VARCLASS . VARCLASS | VARCLASS . FUNCTION | variable | FUNCTION;
VAL -> number | VV OPERATOR VV | VV / / VV | VV * * VV |  ( VV ) | BOOLEAN | ( VAL );
STRING -> STRING + STRING | ' string ' | " string " | ( STRING );
VV -> VAR | VAL | VV OPERATOR VV | VV , VV | VV OPERATOR STRING;
INBRACKET -> ( ) | ( VV );
DELETE -> delete DELETEVAL;
DELETEVAL -> VAL | VAL . VAL;
FINALLY -> finally { S };
FUNCTION -> VAR ( VV ) | FUNCTION ( FUNCTION ) | VAR ( );
FUNCDEC -> function FUNCTION { SFUNC RETURN } | function FUNCTION { SFUNC };
VARVALFUNC -> VARVALFUNC , VARVALFUNC | VAL | VAR = VAL;
LET -> let VARVALFUNC;
NULL -> null;
THROW -> throw BOOLEAN | throw VAL | throw STRING; 
RETURN -> return VAR | return BOOLEAN | return VAL | return NULL | return STRING;
VAL -> VAR | STRING | NUMBER | ARRAY | BOOLEAN | BREAK
BREAK -> break;
CONTINUE -> continue;
SWITCH -> switch ( VAR ) { CASE };
CASE -> CASE CASE | case VAL : S | DEFAULT;
DEFAULT -> default : S;
CONST -> const VAR = VAL | const { VAR } = VAR;
VALARRAY -> VAL | VALARRAY , VALARRAY | ARRAY;
ARRAY -> [ ] | [ VALARRAY ] | ( ) | ( VALARRAY );
BOOLEAN -> true | false;
TRY -> try { S } CATCH;
CATCH -> catch ( VAR ) { S } | catch ( VAR ) { S } FINALLY;
RELATION -> > | < | = = | ! = | < = | > = | = = = | ! = =;
OPARITH -> + | - | * | / | %;
COMP -> BOOLEAN | VAR | COMPOPRT;
COMPOPRT -> COMPOPRT OPARITH COMPOPRT | COMPOPRT RELATION COMPOPRT | VAL | VAL OPARITH VAL | VAL * * VAL | VAL / / VAL | VAL > > VAL | VAL < < VAL | VAL RELATION VAL | COMPOPRT OR COMPOPRT | COMPOPRT AND COMPOPRT | ( COMPOPRT );
OR -> ||;
AND -> &&;
INCDEC -> + + | - -;
WHILE -> while ( COMP ) { SLOOP };
FOR -> for ( VAR = VAL VAR RELATION VAL VAR INCDEC ) { SLOOP } | for ( const VAR in ARRAY ) { SLOOP } | for ( const VAR of ARRAY ) { SLOOP };
IF -> if ( COMP ) { S } | IF ELIF | IF ELSE;
ELIF -> else if ( COMP ) { S } | ELIF ELIF | ELIF ELSE;
ELSE -> else { S };
SLOOP -> SLOOP SLOPP | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFLOOP | PRINT | WHILE | FOR | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCHLOOP | DELETE | LET | TRY;
IFLOOP -> if ( COMP ) { SLOOP } | IFLOOP ELIF | IFLOOP ELSE | IFLOOP BREAK | IFLOOP PASS | IFLOOP CONTINUE;
ELIFLOOP -> else if ( COMP ) { SLOOP } | ELIFLOOP ELIFLOOP | ELIFLOOP ELSELOOP;
ELSELOOP -> else { SLOOP };
SWITCHLOOP -> switch ( VAR ) { CASELOOP };
CASELOOP -> CASELOOP CASELOOP | case VAL : SLOOP | DEFAULT;
DEFAULTLOOP -> default : SLOOP;
SFUNC -> SFUNC SFUNC | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFFUNC | PRINT | WHILE | FORFUNC | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCHFUNC | DELETE | LET | TRY | RETURN;
IFFUNC -> if ( COMP ) { SFUNC } | IFFUNC ELIFFUNC | IFFUNC ELSEFUNC | IFFUNC RETURN;
ELIFFUNC -> else if ( COMP ) { SFUNC } | ELIFFUNC ELIFFUNC | ELIFFUNC ELSEFUNC;
ELSEFUNC -> else { SFUNC };
SWITCHFUNC -> switch ( VAR ) { CASEFUNC };
CASEFUNC -> CASEFUNC CASEFUNC | case VAL : SFUNC | DEFAULT;
DEFAULTFUNC -> default : S;
FORFUNC -> for ( VAR = VAL VAR RELATION VAL VAR INCDEC ) { SLF } | for ( const VAR in ARRAY ) { SLF } | for ( const VAR of ARRAY ) { SLF };
SLF -> SLF SLF | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFFUNC | IFLOOP | PRINT | WHILE | FORFUNC | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCHFUNC | DELETE | LET | TRY | RETURN;
SWITCHLF -> switch ( VAR ) { CASELF };
CASELF -> CASELF CASELF | case VAL : SFUNC | case VAL : SLOOP | DEFAULTFUNC;
DEFAULTLF -> DEFAULTFUNC | DEFAULTLOOP

