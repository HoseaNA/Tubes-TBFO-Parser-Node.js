Terminals:
+ - * / % var variable number ! = > < ( ) { } true false string ' " & if else : while for in from return , break continue null function throw let finally switch case delete . | try catch default
Variables:
S OPERATOR VAR VARCLASS VAL STRING VV DELETE DELETEVAL FINALLY FUNCTION VARVALFUNC VARDEC LET NULL THROW RETURN BREAK CONTINUE SWITCH CASE DEFAULT CONST VALARRAY ARRAY BOOLEAN TRY CATCH RELATION OPERATOR COMP COMPOPRT OR INCDEC WHILE FOR IF ELIF ELSE FUNCDEC SLOOP IFLOOP ELIFLOOP ELSELOOP SWITCHLOOP CASELOOP DEFAULTLOOP SFUNC IFFUNC ELIFFUNC ELSEFUNC SWITCHFUNC CASEFUNC DEFAULTFUNC FORFUNC SLF SWITCHLF CASELF DEFAULTLF
Productions:
S -> S S | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IF | WHILE | FOR | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCH | DELETE | VARDEC | LET | TRY | FUNCDEC | VAR INCDEC;
OPERATOR -> + | - | * | / | %;
VAR -> variable | VARCLASS ;
VARCLASS -> VARCLASS . VARCLASS | VARCLASS . FUNCTION | variable | FUNCTION;
VAL -> number | VV OPERATOR VV | VV / / VV | VV * * VV |  ( VV ) | BOOLEAN | ( VAL ) | VAR | STRING | NUMBER | ARRAY | BOOLEAN;
STRING -> STRING + STRING | ' string ' | " string " | ( STRING );
VV -> VAR | VAL | VV OPERATOR VV | VV , VV | VV OPERATOR STRING;
DELETE -> delete DELETEVAL;
DELETEVAL -> VAL | VAL . VAL;
FINALLY -> finally { S };
FUNCTION -> VAR ( VV ) | FUNCTION ( FUNCTION ) | VAR ( );
FUNCDEC -> function FUNCTION { SFUNC RETURN } | function FUNCTION { SFUNC };
VARVALFUNC -> VARVALFUNC , VARVALFUNC | VAL | VAR = VAL;
VARDEC -> var VARVALFUNC;
LET -> let VARVALFUNC;
NULL -> null;
THROW -> throw BOOLEAN | throw VAL | throw STRING; 
RETURN -> return VAR | return BOOLEAN | return VAL | return NULL | return STRING | return VV | return;
BREAK -> break;
CONTINUE -> continue;
SWITCH -> switch ( VAR ) { CASE };
CASE -> CASE CASE | case VAL : SLOOP | DEFAULT;
DEFAULT -> default : S;
CONST -> const VAR = VAL | const { VAR } = VAR;
VALARRAY -> VAL | VALARRAY , VALARRAY | ARRAY;
ARRAY -> [ ] | [ VALARRAY ] | ( ) | ( VALARRAY );
BOOLEAN -> true | false;
TRY -> try { S } CATCH;
CATCH -> catch ( VAR ) { S } | catch ( VAR ) { S } FINALLY;
RELATION -> > | < | = = | ! = | < = | > = | = = = | ! = =;
COMP -> BOOLEAN | VAR | COMPOPRT;
COMPOPRT -> COMPOPRT OPERATOR COMPOPRT | COMPOPRT RELATION COMPOPRT | VAL | VAL OPERATOR VAL | VAL * * VAL | VAL / / VAL | VAL > > VAL | VAL < < VAL | VAL RELATION VAL | COMPOPRT OR COMPOPRT | COMPOPRT AND COMPOPRT | ( COMPOPRT );
OR -> ||;
AND -> &&;
INCDEC -> + + | - -;
WHILE -> while ( COMP ) { SLOOP };
FOR -> for ( FORINC1 FORINC2 FORINC3 ) { SLOOP } | for ( const VAR in ARRAY ) { SLOOP } | for ( const VAR of ARRAY ) { SLOOP };
FORINC1 -> VAL = VAL | LET;
FORINC2 -> VAL RELATION VAL;
FORINC3 -> VAL INCDEC | VAL INCDEC;
IF -> if ( COMP ) { S } | IF ELIF | IF ELSE;
ELIF -> else if ( COMP ) { S } | ELIF ELIF | ELIF ELSE;
ELSE -> else { S };
SLOOP -> SLOOP SLOOP | VV | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFLOOP | WHILE | FOR | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCHLOOP | DELETE | VARDEC | LET | TRY | VAR INCDEC | BREAK | CONTINUE | PASS;
IFLOOP -> if ( COMP ) { SLOOP } | IFLOOP ELIFLOOP | IFLOOP ELSELOOP;
ELIFLOOP -> else if ( COMP ) { SLOOP } | ELIFLOOP ELIFLOOP | ELIFLOOP ELSELOOP;
ELSELOOP -> else { SLOOP };
SWITCHLOOP -> switch ( VAR ) { CASELOOP };
CASELOOP -> CASELOOP CASELOOP | case VAL : SLOOP | DEFAULTLOOP;
DEFAULTLOOP -> default : SLOOP;
SFUNC -> SFUNC SFUNC | THROW | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFFUNC | WHILE | FORFUNC | FUNCTION | VAR INCDEC | VARCLASS | COMMENT | ARRAY | VAR INCDEC | SWITCHFUNC | DELETE | VARDEC | LET | TRY | RETURN | VARVALFUNC;
IFFUNC -> if ( COMP ) { SFUNC } | IFFUNC ELIFFUNC | IFFUNC ELSEFUNC | IFFUNC RETURN;
ELIFFUNC -> else if ( COMP ) { SFUNC } | ELIFFUNC ELIFFUNC | ELIFFUNC ELSEFUNC;
ELSEFUNC -> else { SFUNC };
SWITCHFUNC -> switch ( VAR ) { CASEFUNC };
CASEFUNC -> CASEFUNC CASEFUNC | case VAL : SFUNC | DEFAULT;
DEFAULTFUNC -> default : SFUNC;
FORFUNC -> for ( FORINC1 FORINC2 FORINC3 ) { SLF } | for ( const VAR in ARRAY ) { SLF } | for ( const VAR of ARRAY ) { SLF };
SLF -> SLF SLF | THROW | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IFFUNC | IFLOOP | WHILE | FORFUNC | FUNCTION | VARCLASS | COMMENT | ARRAY | SWITCHFUNC | DELETE | VARDEC | LET | TRY | RETURN | VAR INCDEC | CONTINUE | PASS;
SWITCHLF -> switch ( VAR ) { CASELF };
CASELF -> CASELF CASELF | case VAL : SFUNC | case VAL : SLOOP | DEFAULTFUNC;
DEFAULTLF -> DEFAULTFUNC | DEFAULTLOOP